if(length(sides) < 2) {
stop("'sides' must be a vector of length greater than 1")
} else if (sum(duplicated(sides)) >= 1) {
stop("'sides' cannot have duplicated elements")
} else {
return(TRUE)
}
}
#' @title Checking "Prob"
#' @description Checks if the given input is a correct "sides" argument
#' @param prob vector of (at least 2) probability values, between 0 and 1, summing to 1
#' @return logical value; TRUE or FALSE.
#' @export
check_prob <- function(prob) {
if(sum(prob) != 1) {
stop("elements in 'prob' must add up to 1")
} else if(sum((prob < 0) & (prob > 1)) >= 1) {
stop("elements in prob must be between 0 and 1")
} else {
return(TRUE)
}
}
#####################################
######## Creating the Object ########
#####################################
#' @title Device
#' @description Creates an object of class device
#' @param sides vector of (at least 2) sides, default of 1 and 2
#' @param prob probability for each side
#' @return device object
#' @export
device <- function(sides = c(1, 2), prob = c(0.5, 0.5)) {
if(check_sides(sides) == FALSE) {
stop("invalid sides value")
} else if(check_prob(prob) == FALSE) {
stop ("invalid probability value")
} else if(length(sides) != length(prob)) {
stop("sides and prob must be of the same length")
} else {
obj <- list(
sides = sides,
prob = prob
)
class(obj) <- "device"
return(obj)
}
}
#' @export
print.device <- function(x) {
cat('object "device"\n\n')
device_df <- data.frame(
sides = x$sides,
prob = x$prob
)
print(device_df)
invisible(x)
}
#' @export
is.device <- function(x) {
if((class(x) == "device")) {
return(TRUE)
} else {
return(FALSE)
}
}
#' @title Rolling a device
#' @description Simulates rolling the specified device.
#' @param device object of class "device", with at least two sides and appropriate probability values
#' @param times the number of times the device is to be rolled
#' @return The observed rolls
#' @export
roll <- function(device, times) {
check_times(times)
sample <- sample(device$sides,
size = times,
replace = TRUE,
prob = device$prob)
l <- list("rolls" = sample,
"sides" = device$sides,
"prob" = device$prob,
"total" = times)
class(l) <- "rolls"
return(l)
}
#' @export
check_times <- function(times) {
if((times %% 1) != 0) {
stop("times must be an integer")
} else if(times < 1) {
stop("sides must be a positive integer")
} else {
return(TRUE)
}
}
#' @export
print.rolls <- function(x) {
cat("object 'rolls' \n\n")
list = list(
rolls = x$"rolls"
)
print(list)
invisible(x)
}
#####################################
########### summary.rolls ###########
#####################################
#' @export
summary.rolls <- function(x) {
proportions <- as.vector(table(x$rolls) / x$total)
freqs <- data.frame(side = x$sides,
count = as.vector(table(x$rolls)),
prop = proportions)
obj <- list(freqs = freqs)
class(obj) <- "summary.rolls"
obj
}
#' @export
print.summary.rolls <- function(x) {
cat('summary "rolls"\n\n')
print(x$freqs)
invisible(x)
}
#' @export
plot <- function(x, number = x$total) {
barplot(table(x$rolls) / x$total,
border = "grey",
xlab = "sides of device",
ylab = "relative frequencies",
main = paste("Relative Frequencies in a series of", number, "rolls")
)
}
#' @export
"[.rolls" <- function(x, i) {
x$roll[i]
}
#' @export
"[<-.rolls" <- function(x, i, value) {
if (value != x$sides[1] & value != x$sides[2]) {
stop(sprintf('\nreplacing value must be %s or %s', x$sides[1], x$coin[2]))
}
if (i > x$total) {
stop("\nindex out of bounds")
}
x$rolls[i] <- value
x
}
#' @export
"+.rolls" <- function(device, increment) {
if (length(increment) != 1 | increment <= 0) {
stop("\ninvalid increment")
}
more <- roll(device, times = increment)
r <- c(device, more)
r$sides <- device$sides
r$rolls <- c(device$rolls, more$rolls)
r$prob <- device$prob
r$total <- device$total + more$total
class(r) <- "rolls"
r
}
set.seed(123)
fair_dev <- device(sides = letters[1:8], prob = rep(1/8, 8))
fair500 <- roll(fair_dev, times = 500)
devtools::document()
devtools::check_man()
devtools::test()
devtools::build()
View(device)
function(sides = c(1, 2), prob = c(0.5, 0.5)) {
if(check_sides(sides) == FALSE) {
stop("invalid sides value")
} else if(check_prob(prob) == FALSE) {
stop ("invalid probability value")
} else if(length(sides) != length(prob)) {
stop("sides and prob must be of the same length")
} else {
obj <- list(
sides = sides,
prob = prob
)
class(obj) <- "device"
return(obj)
}
}
devtools::build()
#####################################
######## Creating the Object ########
#####################################
#' @title device
#' @description Creates an object of class device
#' @param sides vector of (at least 2) sides, default of 1 and 2
#' @param prob probability for each side
#' @return device object
#' @export
device <- function(sides = c(1, 2), prob = c(0.5, 0.5)) {
if(check_sides(sides) == FALSE) {
stop("invalid sides value")
} else if(check_prob(prob) == FALSE) {
stop ("invalid probability value")
} else if(length(sides) != length(prob)) {
stop("sides and prob must be of the same length")
} else {
obj <- list(
sides = sides,
prob = prob
)
class(obj) <- "device"
return(obj)
}
}
#' @export
print.device <- function(x) {
cat('object "device"\n\n')
device_df <- data.frame(
sides = x$sides,
prob = x$prob
)
print(device_df)
invisible(x)
}
#' @export
is.device <- function(x) {
if((class(x) == "device")) {
return(TRUE)
} else {
return(FALSE)
}
}
#####################################
######## Auxiliary Functions ########
#####################################
#' @title Checking "Sides"
#' @description Checks if the given input is a correct "sides" argument
#' @param sides vector of (at least 2) sides, default of 1 and 2e
#' @return logical value; TRUE or FALSE.
#' @export
check_sides <- function(sides) {
if(length(sides) < 2) {
stop("'sides' must be a vector of length greater than 1")
} else if (sum(duplicated(sides)) >= 1) {
stop("'sides' cannot have duplicated elements")
} else {
return(TRUE)
}
}
#' @title Checking "Prob"
#' @description Checks if the given input is a correct "sides" argument
#' @param prob vector of (at least 2) probability values, between 0 and 1, summing to 1
#' @return logical value; TRUE or FALSE.
#' @export
check_prob <- function(prob) {
if(sum(prob) != 1) {
stop("elements in 'prob' must add up to 1")
} else if(sum((prob < 0) & (prob > 1)) >= 1) {
stop("elements in prob must be between 0 and 1")
} else {
return(TRUE)
}
}
#####################################
######## Creating the Object ########
#####################################
#' @title device
#' @description Creates an object of class device
#' @param sides vector of (at least 2) sides, default of 1 and 2
#' @param prob probability for each side
#' @return device object
#' @export
device <- function(sides = c(1, 2), prob = c(0.5, 0.5)) {
if(check_sides(sides) == FALSE) {
stop("invalid sides value")
} else if(check_prob(prob) == FALSE) {
stop ("invalid probability value")
} else if(length(sides) != length(prob)) {
stop("sides and prob must be of the same length")
} else {
obj <- list(
sides = sides,
prob = prob
)
class(obj) <- "device"
return(obj)
}
}
#' @export
print.device <- function(x) {
cat('object "device"\n\n')
device_df <- data.frame(
sides = x$sides,
prob = x$prob
)
print(device_df)
invisible(x)
}
#' @export
is.device <- function(x) {
if((class(x) == "device")) {
return(TRUE)
} else {
return(FALSE)
}
}
#####################################
######## Auxiliary Functions ########
#####################################
#' @title Checking "Sides"
#' @description Checks if the given input is a correct "sides" argument
#' @param sides vector of (at least 2) sides, default of 1 and 2e
#' @return logical value; TRUE or FALSE.
#' @export
check_sides <- function(sides) {
if(length(sides) < 2) {
stop("'sides' must be a vector of length greater than 1")
} else if (sum(duplicated(sides)) >= 1) {
stop("'sides' cannot have duplicated elements")
} else {
return(TRUE)
}
}
#' @title Checking "Prob"
#' @description Checks if the given input is a correct "sides" argument
#' @param prob vector of (at least 2) probability values, between 0 and 1, summing to 1
#' @return logical value; TRUE or FALSE.
#' @export
check_prob <- function(prob) {
if(sum(prob) != 1) {
stop("elements in 'prob' must add up to 1")
} else if(sum((prob < 0) & (prob > 1)) >= 1) {
stop("elements in prob must be between 0 and 1")
} else {
return(TRUE)
}
}
devtools::build()
?device
devtools::build()
#####################################
######## Creating the Object ########
#####################################
#' @title device
#' @description Creates an object of class device
#' @param sides vector of (at least 2) sides, default of 1 and 2
#' @param prob probability for each side
#' @return device object
#' @export
device <- function(sides = c(1, 2), prob = c(0.5, 0.5)) {
if(check_sides(sides) == FALSE) {
stop("invalid sides value")
} else if(check_prob(prob) == FALSE) {
stop ("invalid probability value")
} else if(length(sides) != length(prob)) {
stop("sides and prob must be of the same length")
} else {
obj <- list(
sides = sides,
prob = prob
)
class(obj) <- "device"
return(obj)
}
}
#' @export
print.device <- function(x) {
cat('object "device"\n\n')
device_df <- data.frame(
sides = x$sides,
prob = x$prob
)
print(device_df)
invisible(x)
}
#' @export
is.device <- function(x) {
if((class(x) == "device")) {
return(TRUE)
} else {
return(FALSE)
}
}
#####################################
######## Auxiliary Functions ########
#####################################
#' @title Checking "Sides"
#' @description Checks if the given input is a correct "sides" argument
#' @param sides vector of (at least 2) sides, default of 1 and 2e
#' @return logical value; TRUE or FALSE.
#' @export
check_sides <- function(sides) {
if(length(sides) < 2) {
stop("'sides' must be a vector of length greater than 1")
} else if (sum(duplicated(sides)) >= 1) {
stop("'sides' cannot have duplicated elements")
} else {
return(TRUE)
}
}
#' @title Checking "Prob"
#' @description Checks if the given input is a correct "sides" argument
#' @param prob vector of (at least 2) probability values, between 0 and 1, summing to 1
#' @return logical value; TRUE or FALSE.
#' @export
check_prob <- function(prob) {
if(sum(prob) != 1) {
stop("elements in 'prob' must add up to 1")
} else if(sum((prob < 0) & (prob > 1)) >= 1) {
stop("elements in prob must be between 0 and 1")
} else {
return(TRUE)
}
}
devtools::build()
devtools::install()
devtools::document()
devtools::check_man()
devtools::test()
devtools::build()
devtools::install()
devtools::install()
devtools::install()
devtools::build()
devtools::install()
devtools::install()
devtools::build()
install.packages("roller.Rproj")
devtools::build()
devtools::install()
?devtools::install
devtools::install()
setwd("~/Desktop/roller")
library(devtools)
devtools::document()
devtools::check_man()
devtools::test()
devtools::use_vignette(name = "Introduction")
devtools::build_vignettes()
devtools::install(build_vignettes = TRUE)
devtools::build()
devtools::install()
setwd("~/Desktop/roller")
library(devtools)
devtools::document()
devtools::check_man()
devtools::test()
devtools::use_vignette(name = "Introduction")
devtools::build_vignettes()
devtools::install(build_vignettes = TRUE)
devtools::build()
devtools::install()
install_version("devtools", version = "1.13.4")
library(devtools)
devtools::document()
devtools::check_man()
devtools::test()
devtools::use_vignette(name = "Introduction")
devtools::build_vignettes()
devtools::install(build_vignettes = TRUE)
devtools::build()
devtools::install()
library(devtools)
devtools::document()
devtools::check_man()
devtools::test()
devtools::use_vignette(name = "Introduction")
devtools::build_vignettes()
devtools::install(build_vignettes = TRUE)
devtools::build()
devtools::install()
#library(devtools)
devtools::document()
devtools::check_man()
devtools::test()
devtools::use_vignette(name = "Introduction")
devtools::build_vignettes()
devtools::install(build_vignettes = TRUE)
devtools::build()
devtools::install()
#library(devtools)
devtools::document()
devtools::check_man()
devtools::test()
devtools::use_vignette(name = "Introduction")
devtools::build_vignettes()
devtools::install(build_vignettes = TRUE)
devtools::build()
devtools::install()
#library(devtools)
devtools::document()
devtools::check_man()
devtools::test()
devtools::use_vignette(name = "Introduction")
devtools::build_vignettes()
devtools::install(build_vignettes = TRUE)
devtools::build()
devtools::install()
#library(devtools)
devtools::document()
devtools::check_man()
devtools::test()
devtools::use_vignette(name = "Introduction")
devtools::build_vignettes()
devtools::install(build_vignettes = TRUE)
devtools::build()
devtools::install()
#library(devtools)
devtools::document()
devtools::check_man()
devtools::test()
devtools::use_vignette(name = "Introduction")
devtools::build_vignettes()
devtools::install(build_vignettes = TRUE)
devtools::build()
devtools::install()
